#!/usr/bin/env python3

# Copyright Â© 2011-2015 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import os
import re
import subprocess as ipc
import sys
import warnings

regex = re.compile(br'''
    ^
    [0-9]+ : \s+
    [0-9a-f]+ \s+
    (?: [0-9]+ | 0x[0-9a-f]+ ) \s+
    [A-Z]+ \s+
    [A-Z]+ \s+
    [A-Z]+ \s+
    (?P<def> (?: [A-Z]+ | [0-9]+)) \s*
    (?P<symbol> \S+)?
''', re.VERBOSE)

def warn(template, **kwargs):
    message = 'elfsymgrep: ' + template.format(**kwargs)
    print(message, file=sys.stderr)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--undefined', dest='defined', action='store_const', const=False)
    parser.add_argument('-d', '--defined', dest='defined', action='store_const', const=True)
    parser.add_argument('-s', '--ignore-symlinks', action='store_const', const=True)
    parser.add_argument('regex', metavar='REGEX')
    parser.add_argument('paths', metavar='ELF-FILE', nargs='+')
    options = parser.parse_args()
    options.regex = re.compile(options.regex)
    if options.defined is None:
        template = '{path}\t{defined}\t{symbol}'
    else:
        template = '{path}\t{symbol}'
    for path in options.paths:
        if options.ignore_symlinks:
            if os.path.islink(path):
                continue
        try:
            file = open(path, 'rb')
        except OSError as exc:
            warn('{path}: {exc}', exc=exc.args[1].lower(), path=path)
            continue
        with file:
            magic = file.read(4)
            if magic != b'\x7fELF':
                warn('{path}: not ELF', path=path)
                continue
        readelf = ipc.Popen(['readelf', '-s', '-W', '--', path], stdout=ipc.PIPE)
        try:
            for line in readelf.stdout:
                orig_line, line = line, line.strip()
                if not line[:1].isdigit():
                    continue
                match = regex.match(line)
                if match is None:
                    raise RuntimeError('Cannot parse readelf output: {}'.format(repr(orig_line)[1:]))
                match = match.groupdict()
                if match['symbol'] is not None:
                    symbol = match['symbol'].decode('ASCII')
                    if not options.regex.search(symbol):
                        continue
                    defined = match['def'].decode('ASCII')
                    if defined.isdigit():
                        if options.defined is False:
                            continue
                        defined = ''
                    elif defined == 'UND':
                        if options.defined is True:
                            continue
                    else:
                        continue
                    print(template.format(path=path, defined=defined, symbol=symbol))
        finally:
            readelf.stdout.close()
            if readelf.wait() != 0:
                warnings.warn('readelf died unexpectedly', category=RuntimeWarning)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
